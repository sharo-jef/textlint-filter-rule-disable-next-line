{"version":3,"sources":["../src/parse-comment.js"],"names":["isHTMLComment","getValuesFromHTMLComment","parseListConfig","parseRuleIds","HTML_COMMENT_REGEXP","htmlString","test","commentValue","results","replace","all","comment","push","string","items","split","forEach","name","trim","Object","keys"],"mappings":"AAAA;AACA;;;;;QAEgBA,a,GAAAA,a;QASAC,wB,GAAAA,wB;QAYAC,e,GAAAA,e;QAoBAC,Y,GAAAA,Y;AA1ChB,IAAMC,sBAAsB,sBAA5B;AACO,SAASJ,aAAT,CAAuBK,UAAvB,EAAmC;AACtC,WAAOD,oBAAoBE,IAApB,CAAyBD,UAAzB,CAAP;AACH;;AAED;;;;;AAKO,SAASJ,wBAAT,CAAkCM,YAAlC,EAAgD;AACnD,QAAMC,UAAU,EAAhB;AACAD,iBAAaE,OAAb,CAAqBL,mBAArB,EAA0C,UAASM,GAAT,EAAcC,OAAd,EAAsB;AAC5DH,gBAAQI,IAAR,CAAaD,OAAb;AACH,KAFD;AAGA,WAAOH,OAAP;AACH;AACD;;;;;AAKO,SAASN,eAAT,CAAyBW,MAAzB,EAAiC;AACpC,QAAMC,QAAQ,EAAd;;AAEA;AACAD,aAASA,OAAOJ,OAAP,CAAe,UAAf,EAA2B,GAA3B,CAAT;AACAI,WAAOE,KAAP,CAAa,IAAb,EAAmBC,OAAnB,CAA2B,UAAUC,IAAV,EAAgB;AACvCA,eAAOA,KAAKC,IAAL,EAAP;AACA,YAAI,CAACD,IAAL,EAAW;AACP;AACH;AACDH,cAAMG,IAAN,IAAc,IAAd;AACH,KAND;AAOA,WAAOH,KAAP;AACH;;AAED;;;;;AAKO,SAASX,YAAT,CAAsBU,MAAtB,EAA8B;AACjC,WAAOM,OAAOC,IAAP,CAAYlB,gBAAgBW,MAAhB,CAAZ,CAAP;AACH","file":"parse-comment.js","sourcesContent":["// LICENSE : MIT\r\n\"use strict\";\r\nconst HTML_COMMENT_REGEXP = /<!--((?:.|\\s)*?)-->/g;\r\nexport function isHTMLComment(htmlString) {\r\n    return HTML_COMMENT_REGEXP.test(htmlString);\r\n}\r\n\r\n/**\r\n * get comment value from html comment tag\r\n * @param {string} commentValue <!-- comment -->\r\n * @returns {string[]}\r\n */\r\nexport function getValuesFromHTMLComment(commentValue) {\r\n    const results = [];\r\n    commentValue.replace(HTML_COMMENT_REGEXP, function(all, comment){\r\n        results.push(comment);\r\n    });\r\n    return results;\r\n}\r\n/**\r\n * Parses a config of values separated by comma.\r\n * @param {string} string The string to parse.\r\n * @returns {Object} Result map of values and true values\r\n */\r\nexport function parseListConfig(string) {\r\n    const items = {};\r\n\r\n    // Collapse whitespace around ,\r\n    string = string.replace(/\\s*,\\s*/g, \",\");\r\n    string.split(/,+/).forEach(function (name) {\r\n        name = name.trim();\r\n        if (!name) {\r\n            return;\r\n        }\r\n        items[name] = true;\r\n    });\r\n    return items;\r\n}\r\n\r\n/**\r\n * parse \"textlint-enable aRule, bRule\" and return [\"aRule\", \"bRule\"]\r\n * @param {string} string\r\n * @returns {string[]}\r\n */\r\nexport function parseRuleIds(string) {\r\n    return Object.keys(parseListConfig(string));\r\n}\r\n"]}